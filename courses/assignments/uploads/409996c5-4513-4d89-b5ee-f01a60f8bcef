# A feladat megoldasa alatt a kriptokonyv 89. oldalan talalhato peldat kovettem

import math
import base64
from utils import modinv, byte_to_bits, bits_to_byte

name = 'Antal Krisztian Tamas'
abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz '
binary_stream = [byte_to_bits(char.encode()[0]) for char in name]
binary_stream = [item for tup in binary_stream for item in tup]

#mert bitek
N = 2

p = 17809722086933542971899795493032533633018308194249 #37975227936943673922808872755445627854565536638199
q = 66928664412884175713419762028680983788952371730793 #40094690950920881030683735292761468389214899724061

print('p: ', p)
print('q: ', q)

n = p * q

print('n: ', n)

euler = (p-1) * (q-1)

print('phi(n): ', euler)

e = 65537

print('e: ', e)

d = modinv(e, euler)

print('d: ', d)

l = int(math.log(n, N))

print('l: ', l)

chunks = [binary_stream[i:i+l] for i in range(0, len(binary_stream), l)]

pw = l - 1

result = []
ps = []

for chunk in chunks:
    pw = l - 1
    p_arr = []
    for bit in chunk:
        p_arr.append(bit * pow(N, pw))
        pw-=1
    ps.append(sum(p_arr))

# print('ps original: ', ps)

cs = []
# C = p^e mod n
for p in ps:
    cs.append(pow(p, e, n))

# print('cs original: ', cs)

result = []

for c in cs:
    pw = l
    rem = c

    while rem != 0:
        num = int(rem / pow(N, pw))
        result.append(num)
        rem -= num * pow(N, pw)
        pw -= 1

print('crypto text: ',base64.b64encode(''.join([chr(char) for char in result]).encode()).decode())

#dekriptalas

ps = []

for c in cs:
    ps.append(pow(c,d,n))

# print('decrypted ps: ', ps)

result = []

for p in ps:
    pw = l - 1
    rem = p

    while rem != 0:
        num = int(rem / pow(N, pw))
        result.append(num)
        rem -= num * pow(N, pw)
        pw -= 1

bytess = [tuple(result[i:i+8]) for i in range(0, len(result), 8)]

print('decrypted_text: ', ''.join([chr(bits_to_byte(byte)) for byte in bytess]))



